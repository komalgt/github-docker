name: ECS Auto-Scale Based on CPU

on:
  schedule:
    - cron: '*/5 * * * *' # Runs every 5 minutes
  workflow_dispatch:       

jobs:
  autoscale:
    runs-on: ubuntu-latest
    env:
      CLUSTER: doc-cluster
      SERVICE: doc-task-service
      AWS_REGION: ap-south-1
      CPU_HIGH_THRESHOLD: 70
      CPU_LOW_THRESHOLD: 30
      SCALE_UP_COUNT: 3
      SCALE_DOWN_COUNT: 1

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get latest CPU utilization from CloudWatch
        id: get_cpu
        run: |
          # Code Generated by Sidekick is for learning and experimentation purposes only.
          START_TIME=$(date -u -d '-10 minutes' +"%Y-%m-%dT%H:%M:%SZ")
          END_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          CPU=$(aws cloudwatch get-metric-statistics \
            --namespace AWS/ECS \
            --metric-name CPUUtilization \
            --dimensions Name=ClusterName,Value=${CLUSTER} Name=ServiceName,Value=${SERVICE} \
            --start-time $START_TIME \
            --end-time $END_TIME \
            --period 300 \
            --statistics Average \
            --query 'Datapoints | sort_by(@,&Timestamp) | [-1].Average' \
            --output text)
          echo "CPU: $CPU"
          echo "CPU=$CPU" >> $GITHUB_ENV

      - name: Decide desired task count
        id: decide_scale
        run: |
          # Code Generated by Sidekick is for learning and experimentation purposes only.
          CPU=${{ env.CPU }}
          DESIRED_COUNT=${{ env.SCALE_DOWN_COUNT }}
          echo "Evaluating auto-scaling decision..."
          if [ "$CPU" != "None" ]; then
            CPU_INT=$(printf "%.0f" $CPU)
            if [ $CPU_INT -ge ${{ env.CPU_HIGH_THRESHOLD }} ]; then
              DESIRED_COUNT=${{ env.SCALE_UP_COUNT }}
            elif [ $CPU_INT -le ${{ env.CPU_LOW_THRESHOLD }} ]; then
              DESIRED_COUNT=${{ env.SCALE_DOWN_COUNT }}
            fi
          fi
          echo "DESIRED_COUNT=$DESIRED_COUNT" >> $GITHUB_ENV
          echo "Selected desired count: $DESIRED_COUNT"

      - name: Update ECS service desired count
        run: |
          # Code Generated by Sidekick is for learning and experimentation purposes only.
          aws ecs update-service \
            --cluster "${{ env.CLUSTER }}" \
            --service "${{ env.SERVICE }}" \
            --desired-count "${{ env.DESIRED_COUNT }}"
