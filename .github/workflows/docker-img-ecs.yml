# Code Generated by Sidekick is for learning and experimentation purposes only.

name: Deploy or Rollback image to ECS

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      rollback:
        description: 'Set true to trigger rollback, false for deploy'
        required: false
        default: 'false'
        type: boolean
      previous_image_tag:
        description: 'Image tag to roll back to (required if rollback=true)'
        required: false
        default: ''
        type: string

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: myappservice
  ECS_CLUSTER: doc-cluster
  ECS_SERVICE: doc-task-service
  TASK_DEFINITION_FAMILY: doc-task
  CONTAINER_NAME: doc-task
  IMAGE_TAG: ${{ github.sha }}

jobs:
  deploy:
    if: ${{ github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.rollback != 'true') }}
    name: Build, Push & Deploy
    runs-on: ubuntu-latest
    env:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REPO_URI: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/myappservice
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | \
            docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Build Docker image
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .

      - name: Tag Docker image
        run: |
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Push Docker image to Amazon ECR
        run: |
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Download current ECS task definition
        id: task-def
        run: |
          aws ecs describe-task-definition --task-definition $TASK_DEFINITION_FAMILY > task-def.json

      - name: Update task definition with new image
        id: new-task-def
        run: |
          IMAGE_URI="$AWS_ACCOUNT_ID.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}"
          jq --arg IMAGE_URI "$IMAGE_URI" --arg CONTAINER_NAME "$CONTAINER_NAME" '
            .taskDefinition |
            .containerDefinitions |=
              (map(if .name == $CONTAINER_NAME then .image = $IMAGE_URI else . end)) |
            del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)
          ' task-def.json > new-task-def.json

      - name: Register new ECS task definition revision
        id: register-task-def
        run: |
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://new-task-def.json --query "taskDefinition.taskDefinitionArn" --output text)
          echo "NEW_TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Update ECS service to new task definition
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $NEW_TASK_DEF_ARN

  rollback:
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.rollback == 'true' }}
    name: Rollback ECS deployment
    runs-on: ubuntu-latest
    env:
      ECR_REPO_URI: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/myappservice
    steps:
      - name: Call ecs-rollback reusable workflow
        uses: ./.github/workflows/ecs-rollback.yml
        with:
          previous_image_tag: ${{ github.event.inputs.previous_image_tag }}
          aws_region: ap-south-1
          ecs_cluster: doc-cluster
          ecs_service: doc-task-service
          task_family: doc-task
          container_name: doc-task
          ecr_repo: ${{ env.ECR_REPO_URI }}
        secrets:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  email_notify_success:
    needs: [deploy, rollback]
    if: ${{ success() }}
    runs-on: ubuntu-latest
    steps:
      - uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASS }}
          to: kturakannavar@deloitte.com
          from: komalgt@gmail.com
          subject: 'ECS Workflow Succeeded'
          body: 'The ECS workflow was successful. Check workflow run for details.'

  email_notify_failure:
    needs: [deploy, rollback]
    if: ${{ failure() }}
    runs-on: ubuntu-latest
    steps:
      - uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASS }}
          to: kturakannavar@deloitte.com
          from: komalgt@gmail.com
          subject: 'ECS Workflow FAILED'
          body: 'The ECS workflow failed. Please check workflow logs for troubleshooting.'
